import numpy as np
import cv2
import matplotlib.pyplot as plt


# 邻近值插值
def nearest_inter(image,width,height):
    src_w,src_h,channel = image.shape
    dst = np.zeros((width,height,channel),dtype=image.dtype)
    scale_x = width/src_w
    scale_y = height/src_h
    for x in range(width):
        for y in range(height):
            src_x = int(x/scale_x + 0.5)
            src_y = int(y/scale_y + 0.5)
            dst[x,y] = image[src_x,src_y]
    return dst


# 双线性插值
def bilinear_inter(image,width,height):
    src_w,src_h,channel = image.shape
    if width == src_w and height == src_h :
        return image.copy()
    dst = np.zeros((width,height,channel),dtype=image.dtype)
    scale_x = src_w/width
    scale_y = src_h / height
    for i in range(channel):
        for x in range(width):
            for y in range(height):
                src_x = (x + 0.5) * scale_x - 0.5
                src_y = (y + 0.5) * scale_y - 0.5
                src_x0 = int(src_x)
                src_x1 = min(src_x0+1,src_w-1)
                src_y0= int(src_y)
                src_y1 = min(src_y0 + 1,src_h-1)
                # 先在x轴上插值，再在y轴上插值
                # temp0 = (src_x1 - src_x) * image[src_x0,src_y0,i] + (src_x - src_x0) * image[src_x1,src_y0,i]
                # temp1 = (src_x1 - src_x) * image[src_x0,src_y1,i] + (src_x - src_x0) * image[src_x1,src_y1,i]
                # dst[x,y,i] = int((src_y1 - src_y) * temp1 + (src_y - src_y0) * temp0)

                # 先在y轴上插值，再在x轴上插值
                temp3 = (src_y1 - src_y) * image[src_x0,src_y0,i] + (src_y - src_y0) * image[src_x0,src_y1,i]
                temp4 = (src_y1 - src_y) * image[src_x0,src_y1,i] + (src_y - src_y0) * image[src_x1,src_y1,i]
                dst[x,y,i] = int((src_x1 - src_x) * temp3 + (src_x - src_x0)*temp4)
    return dst

# 灰度直方图
def show_hist_gray(image):
    plt.figure()
    # 方法1
    # gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
    # plt.hist(gray.ravel(),256)

    # 方法2
    hist = cv2.calcHist([image],[0],None,[256],[0,255])
    plt.plot(hist)
    plt.show()

# 彩色直方图
def show_hist_color(image):
    channels = image.shape[2]
    print(channels,type(channels))
    plt.figure()
    bgr = ('b','g','r')
    for i in range(channels):
        hist = cv2.calcHist([image], [i], None, [256], [0, 255])
        plt.plot(hist,color = bgr[i])
    plt.title = "Hist_Color"
    plt.show()


# 直方图均衡化
def show_hist_equ_gray(image):
    gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
    dst = cv2.equalizeHist(gray)
    cv2.imshow("src",gray)
    cv2.imshow("eql_des",dst)

# 彩色直方图均衡化
def show_hist_equ_color(image):

    (bc,gc,rc) = cv2.split(image)
    bi = cv2.equalizeHist(bc)
    gi = cv2.equalizeHist(gc)
    ri = cv2.equalizeHist(rc)
    dst = cv2.merge((bi,gi,ri))
    cv2.imshow("src",image)
    cv2.imshow("eql_color",dst)

if __name__ == "__main__":
    path = "../image/lenna.png"
    image = cv2.imread(path)

    cv2.imshow("near",nearest_inter(image,680,480))
    cv2.imshow("bilinear", bilinear_inter(image,680,480))

    show_hist_gray(image)
    show_hist_color(image)

    show_hist_equ_gray(image)
    show_hist_equ_color(image)
    cv2.waitKey(0)
