import cv2
import numpy as np
import math


# 步骤1：读取图像并灰度化处理
def to_gray(image):
    return np.dot(image[..., :3], [0.299, 0.587, 0.114]).astype(np.uint8)


# 步骤2：高斯滤波去噪
def gaussian_filter(image, kernel_size=5, sigma=1.4):
    kernel = np.zeros((kernel_size, kernel_size))
    center = kernel_size // 2
    sum_val = 0
    for i in range(kernel_size):
        for j in range(kernel_size):
            diff = (i - center) ** 2 + (j - center) ** 2
            kernel[i, j] = np.exp(-diff / (2 * sigma ** 2))
            sum_val += kernel[i, j]
    kernel /= sum_val

    # 图像卷积
    height, width = image.shape
    filtered_image = np.zeros_like(image)
    for i in range(center, height - center):
        for j in range(center, width - center):
            region = image[i - center:i + center + 1, j - center:j + center + 1]
            filtered_image[i, j] = np.sum(region * kernel)
    return filtered_image


# 步骤3：使用 Sobel 算子计算图像梯度
def sobel_operator(image):
    Kx = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
    Ky = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])

    height, width = image.shape
    Ix = np.zeros_like(image, dtype=np.float32)
    Iy = np.zeros_like(image, dtype=np.float32)

    for i in range(1, height - 1):
        for j in range(1, width - 1):
            region = image[i - 1:i + 2, j - 1:j + 2]
            Ix[i, j] = np.sum(region * Kx)
            Iy[i, j] = np.sum(region * Ky)

    gradient_magnitude = np.hypot(Ix, Iy)
    gradient_direction = np.arctan2(Iy, Ix) * 180 / np.pi
    gradient_direction[gradient_direction < 0] += 180

    return gradient_magnitude, gradient_direction


# 步骤4：非极大值抑制
def non_maximum_suppression(gradient_magnitude, gradient_direction):
    height, width = gradient_magnitude.shape
    suppressed_image = np.zeros_like(gradient_magnitude)

    for i in range(1, height - 1):
        for j in range(1, width - 1):
            direction = gradient_direction[i, j]
            mag = gradient_magnitude[i, j]

            # 近似角度至0、45、90、135度方向
            if (0 <= direction < 22.5) or (157.5 <= direction <= 180):
                neighbors = [gradient_magnitude[i, j - 1], gradient_magnitude[i, j + 1]]
            elif 22.5 <= direction < 67.5:
                neighbors = [gradient_magnitude[i - 1, j + 1], gradient_magnitude[i + 1, j - 1]]
            elif 67.5 <= direction < 112.5:
                neighbors = [gradient_magnitude[i - 1, j], gradient_magnitude[i + 1, j]]
            elif 112.5 <= direction < 157.5:
                neighbors = [gradient_magnitude[i - 1, j - 1], gradient_magnitude[i + 1, j + 1]]

            # 保留局部极大值
            if mag >= max(neighbors):
                suppressed_image[i, j] = mag
            else:
                suppressed_image[i, j] = 0

    return suppressed_image


# 步骤5：使用双阈值和边缘连接法
def double_threshold_and_hysteresis(suppressed_image, low_threshold_ratio=0.55, high_threshold_ratio=0.05):
    high_threshold = suppressed_image.max() * high_threshold_ratio
    low_threshold = high_threshold * low_threshold_ratio

    strong_edges = np.zeros_like(suppressed_image, dtype=np.uint8)
    weak_edges = np.zeros_like(suppressed_image, dtype=np.uint8)

    strong_pixel = 255
    weak_pixel = 75

    height, width = suppressed_image.shape
    for i in range(height):
        for j in range(width):
            if suppressed_image[i, j] >= high_threshold:
                strong_edges[i, j] = strong_pixel
            elif low_threshold <= suppressed_image[i, j] < high_threshold:
                weak_edges[i, j] = weak_pixel

    # 边缘连接
    edges = np.copy(strong_edges)
    for i in range(1, height - 1):
        for j in range(1, width - 1):
            if weak_edges[i, j] == weak_pixel:
                if (strong_edges[i - 1:i + 2, j - 1:j + 2] == strong_pixel).any():
                    edges[i, j] = strong_pixel

    return edges


# 完整的 Canny 边缘检测函数
def canny_edge_detection(image):
    gray_image = to_gray(image)
    blurred_image = gaussian_filter(gray_image)
    gradient_magnitude, gradient_direction = sobel_operator(blurred_image)
    suppressed_image = non_maximum_suppression(gradient_magnitude, gradient_direction)
    edges = double_threshold_and_hysteresis(suppressed_image)
    return edges


# 读取图像并运行 Canny 算法
image = cv2.imread('lenna.png')
edges = canny_edge_detection(image)

# 显示结果
cv2.imshow('Edges', edges)
cv2.waitKey(0)
cv2.destroyAllWindows()
