import torch
import torch.nn as nn
import torch.nn.functional as F


# 定义一个基本的卷积块：包括卷积、BatchNorm 和 LeakyReLU 激活
class ConvBlock(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, leaky_relu_slope=0.1):
        super(ConvBlock, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding)
        self.bn = nn.BatchNorm2d(out_channels)
        self.leaky_relu = nn.LeakyReLU(negative_slope=leaky_relu_slope, inplace=True)

    def forward(self, x):
        return self.leaky_relu(self.bn(self.conv(x)))


# 定义残差块（Residual Block）
class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(ResidualBlock, self).__init__()
        self.conv1 = ConvBlock(in_channels, out_channels, kernel_size=1, stride=1, padding=0)
        self.conv2 = ConvBlock(out_channels, in_channels, kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        return x + self.conv2(self.conv1(x))


# Darknet53 网络实现
class Darknet53(nn.Module):
    def __init__(self):
        super(Darknet53, self).__init__()

        # 第一部分：输入 -> 32x32特征图
        self.conv1 = ConvBlock(3, 32, kernel_size=3, stride=1, padding=1)  # 416x416x3 -> 416x416x32
        self.conv2 = ConvBlock(32, 64, kernel_size=3, stride=2, padding=1)  # 416x416x32 -> 208x208x64

        # 第二部分：使用残差块
        self.residual_blocks1 = self._make_residual_blocks(64, 64, num_blocks=1)
        self.conv3 = ConvBlock(64, 128, kernel_size=3, stride=2, padding=1)  # 208x208x64 -> 104x104x128

        # 第三部分：更多的残差块
        self.residual_blocks2 = self._make_residual_blocks(128, 128, num_blocks=2)
        self.conv4 = ConvBlock(128, 256, kernel_size=3, stride=2, padding=1)  # 104x104x128 -> 52x52x256

        # 第四部分：更多的残差块
        self.residual_blocks3 = self._make_residual_blocks(256, 256, num_blocks=8)
        self.conv5 = ConvBlock(256, 512, kernel_size=3, stride=2, padding=1)  # 52x52x256 -> 26x26x512

        # 第五部分：最后一组残差块
        self.residual_blocks4 = self._make_residual_blocks(512, 512, num_blocks=8)
        self.conv6 = ConvBlock(512, 1024, kernel_size=3, stride=2, padding=1)  # 26x26x512 -> 13x13x1024

    def _make_residual_blocks(self, in_channels, out_channels, num_blocks):
        layers = []
        for _ in range(num_blocks):
            layers.append(ResidualBlock(in_channels, out_channels))
        return nn.Sequential(*layers)

    def forward(self, x):
        # 按照 Darknet53 的网络结构依次传递数据
        x = self.conv1(x)  # 416x416x3 -> 416x416x32
        x = self.conv2(x)  # 416x416x32 -> 208x208x64
        out1 = self.residual_blocks1(x)  # 208x208x64 -> 208x208x64
        x = self.conv3(out1)  # 208x208x64 -> 104x104x128
        out2 = self.residual_blocks2(x)  # 104x104x128 -> 104x104x128
        x = self.conv4(out2)  # 104x104x128 -> 52x52x256
        out3 = self.residual_blocks3(x)  # 52x52x256 -> 52x52x256
        x = self.conv5(out3)  # 52x52x256 -> 26x26x512
        out4 = self.residual_blocks4(x)  # 26x26x512 -> 26x26x512
        x = self.conv6(out4)  # 26x26x512 -> 13x13x1024
        return out1, out2, out3, out4, x  # 返回不同尺度的特征图


# 假设这些是来自Darknet53的不同尺度的特征图
class YOLOv3(nn.Module):
    def __init__(self, num_classes, anchors):
        super(YOLOv3, self).__init__()

        self.backbone = Darknet53()  # 加载 Darknet53

        # 卷积层：将 13x13x1024 转换为 13x13x256
        self.conv_1x1_1024_to_256 = nn.Conv2d(1024, 256, kernel_size=1)

        # 输出层：生成三个不同尺度的输出
        self.conv_52x52 = nn.Conv2d(384, 3 * (4 + 1 + num_classes), kernel_size=1)  # 52x52x75
        self.conv_28x28 = nn.Conv2d(768, 3 * (4 + 1 + num_classes), kernel_size=1)  # 28x28x75
        self.conv_13x13 = nn.Conv2d(256, 3 * (4 + 1 + num_classes), kernel_size=1)  # 13x13x75

        # 进一步卷积层，用于从28x28x768生成52x52x256
        self.conv_28_to_52 = nn.Conv2d(768, 256, kernel_size=3, padding=1)  # 28x28x768 -> 28x28x256
        self.conv_28_to_52_2 = nn.Conv2d(256, 256, kernel_size=3, padding=1)  # 两层卷积

        # 处理52x52特征图，可能的拼接
        self.conv_52_to_52_2 = nn.Conv2d(384, 256, kernel_size=3, padding=1)  # 52x52x384 -> 52x52x256

    def forward(self, x):
        # 获取来自 Darknet53 的特征图，假设返回的就是不同尺度的特征
        out1, out2, out3, out4, out5 = self.backbone(x)

        # 处理 13x13x1024 特征图：降维并上采样
        out1 = self.conv_1x1_1024_to_256(out5)  # 13x13x1024 -> 13x13x256
        out1_up = F.interpolate(out1, size=(28, 28), mode='bilinear', align_corners=False)  # 上采样到28x28

        # 处理 28x28x512 特征图
        out2_up = out2  # 28x28x512 不需要修改

        # 拼接：28x28x512 和 28x28x256 拼接
        out2 = torch.cat([out2_up, out1_up], dim=1)  # 28x28x768

        # 进一步卷积：28x28x768 -> 28x28x256
        out2 = self.conv_28_to_52(out2)  # 28x28x768 -> 28x28x256
        out2 = self.conv_28_to_52_2(out2)  # 两层卷积处理

        # 拼接：52x52x256 和 52x52x256 拼接
        out3_up = F.interpolate(out2, size=(52, 52), mode='bilinear', align_corners=False)  # 上采样到52x52
        out3 = torch.cat([out3_up, out3], dim=1)  # 52x52x384

        # 最终输出：通过卷积得到每个尺度的检测结果
        out1 = self.conv_13x13(out1)  # 13x13x75
        out2 = self.conv_28x28(out2)  # 28x28x75
        out3 = self.conv_52x52(out3)  # 52x52x75

        return out1, out2, out3
