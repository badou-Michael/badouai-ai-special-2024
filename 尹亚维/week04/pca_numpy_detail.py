import numpy as np
"""
中心化矩阵CentrX
1.根据计算样本矩阵X每一列的平均值得到一个mean矩阵
2.样本矩阵X减去mean矩阵得到一个去中心化之后样本矩阵CentrX

协方差矩阵C
1.得到CentrX的样本数ns
2.根据CentrX的T和CentrX的点积/样本数ns得到协方差矩阵C

如何得到X的降维转换矩阵U
1.根据协方差矩阵C得到对应的特征值a,特征向量b
2.给特征值a排个序
3.从特征向量b中根据特征值a取对应的值得到一个UT
4.从UT得到一个降维转换矩阵U

降维矩阵Z
1.根据Z=XU得到降维矩阵Z

样本矩阵X:
 [[10 15 29]
 [15 46 13]
 [23 21 30]
 [11  9 35]
 [42 45 11]
 [ 9 48  5]
 [11 21 14]
 [ 8  5 15]
 [11 12 21]
 [21 20 25]]
样本集的特征均值:
 [16.1 24.2 19.8]
样本矩阵X的中心化centrX:
 [[ -6.1  -9.2   9.2]
 [ -1.1  21.8  -6.8]
 [  6.9  -3.2  10.2]
 [ -5.1 -15.2  15.2]
 [ 25.9  20.8  -8.8]
 [ -7.1  23.8 -14.8]
 [ -5.1  -3.2  -5.8]
 [ -8.1 -19.2  -4.8]
 [ -5.1 -12.2   1.2]
 [  4.9  -4.2   5.2]]
样本矩阵X的协方差矩阵C:
 [[ 108.32222222   74.53333333  -10.08888889]
 [  74.53333333  260.62222222 -106.4       ]
 [ -10.08888889 -106.4          94.17777778]]
样本集的协方差矩阵C的特征值a:
 [335.15738485  95.32771231  32.63712506]
样本集的协方差矩阵C的特征值a的索引序列ind:
 [0 1 2]
样本集的协方差矩阵C的特征向量b:
 [[-0.30253213 -0.87499307 -0.37797014]
 [-0.86718533  0.08811216  0.49012839]
 [ 0.39555518 -0.47604975  0.78543792]]
样本集的协方差矩阵C的特征向量b中取特征值a的索引序列ind指定的列的值UT:
 [array([-0.30253213, -0.86718533,  0.39555518]), array([-0.87499307,  0.08811216, -0.47604975])]
2阶降维转换矩阵U:
 [[-0.30253213 -0.87499307]
 [-0.86718533  0.08811216]
 [ 0.39555518 -0.47604975]]
X shape: (10, 3)
U shape: (3, 2)
Z shape: (10, 2)
样本矩阵X的降维矩阵Z:
 [[ -4.56200104 -21.2336912 ]
 [-39.28629002 -15.26038349]
 [-13.30247561 -32.55597794]
 [  2.71190993 -25.49365577]
 [-47.37858268 -38.02120912]
 [-42.36990935  -6.0258027 ]
 [-16.00097294 -14.43926499]
 [ -0.822856   -13.7001301 ]
 [ -5.42741864 -18.56462272]
 [-13.80800193 -28.51385518]]
"""

class CPCA(object):
    '''用PCA求样本矩阵X的K阶降维矩阵Z
    Note:请保证输入的样本矩阵X shape=(m, n)，m行样例，n个特征
    '''

    def __init__(self, X, K):
        '''
        :param X:样本矩阵X
        :param K:X的降维矩阵的阶数，即X要特征降维成k阶
        '''
        self.X = X  # 样本矩阵X
        self.K = K  # K阶降维矩阵的K值
        self.centrX = self._centralized()  # 矩阵X的中心化
        self.C = self._cov()  # 协方差矩阵C
        self.U = self._U()  # 降维转换矩阵U
        self.Z = self._Z()  # 降维矩阵Z

    # 中心化即是指变量减去它的均值，使均值为0。 其实就是一个平移的过程，平移后使得所有数据的中心是(0, 0)
    def _centralized(self):
        '''矩阵X的中心化'''
        print('样本矩阵X:\n', self.X)
        # self.X.T：对样本矩阵X做转置
        # np.mean(attr)：计算数组 attr 的平均值（均值）
        # 样本矩阵每一列的均值，为了求出每一列的均值，需要将矩阵X转置，即每一列代表一个特征向量
        mean = np.array([np.mean(attr) for attr in self.X.T])
        print('样本集的特征均值:\n', mean)
        # 矩阵X的中心化
        centrX = self.X - mean
        print('样本矩阵X的中心化centrX:\n', centrX)
        return centrX

    def _cov(self):
        '''求样本矩阵X的协方差矩阵C：为了计算不同维度之间的相关性'''
        # 样本矩阵的样本总数
        ns = np.shape(self.centrX)[0]
        # 样本矩阵的协方差矩阵C= 1/m * Z^T*Z
        # np.dot(self.centrX.T, self.centrX):点积操作，计算转置后的矩阵与原矩阵的点积，得到一个 (n, n) 形状的矩阵
        # ns - 1:除以样本数量减1，这是为了得到无偏估计（unbiased estimate）
        # np.dot:计算向量点积、矩阵乘法以及向量与矩阵的乘法
        C = np.dot(self.centrX.T, self.centrX) / (ns - 1)
        print('样本矩阵X的协方差矩阵C:\n', C)
        return C

    def _U(self):
        '''求X的降维转换矩阵U, shape=(n,k), n是X的特征维度总数，k是降维矩阵的特征维度'''
        # 先求X的协方差矩阵C的特征值和特征向量
        # 特征值赋值给a，对应特征向量赋值给b。函数doc：https://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.linalg.eig.html
        # 特征值：一维数组；特征向量： 二位数组：每一列对应一个特征值的特征向量
        a, b = np.linalg.eig(self.C)
        print('样本集的协方差矩阵C的特征值a:\n', a)

        # np.argsort 它返回的是一个索引数组，而不是直接排序后的数组。原始数组 a:[4 1 3 2] 排序索引:[1 3 2 0]
        # 给出特征值降序的topK的索引序列
        ind = np.argsort(-1 * a)
        print('样本集的协方差矩阵C的特征值a的索引序列ind:\n', ind)

        print('样本集的协方差矩阵C的特征向量b:\n', b)
        # 构建K阶降维的降维转换矩阵U
        # 从矩阵 b 中选择索引数组 ind 中指定的列，并将这些列组合成一个新的列表
        UT = [b[:, ind[i]] for i in range(self.K)]
        print('样本集的协方差矩阵C的特征向量b中取特征值a的索引序列ind指定的列的值UT:\n', UT)
        U = np.transpose(UT)
        print('%d阶降维转换矩阵U:\n' % self.K, U)
        return U

    def _Z(self):
        '''按照Z=XU求降维矩阵Z, shape=(m,k), n是样本总数，k是降维矩阵中特征维度总数'''
        Z = np.dot(self.X, self.U)
        print('X shape:', np.shape(self.X))
        print('U shape:', np.shape(self.U))
        print('Z shape:', np.shape(Z))
        print('样本矩阵X的降维矩阵Z:\n', Z)
        return Z


if __name__ == '__main__':
    # 10个样本3特征的样本集，行为样本，列为特征
    X = np.array([[10, 15, 29],
                  [15, 46, 13],
                  [23, 21, 30],
                  [11, 9, 35],
                  [42, 45, 11],
                  [9, 48, 5],
                  [11, 21, 14],
                  [8, 5, 15],
                  [11, 12, 21],
                  [21, 20, 25]])
    K = np.shape(X)[1] - 1
    pca = CPCA(X, K)

