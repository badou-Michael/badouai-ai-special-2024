# nearest interpolation
# 20240912 徐凯

import cv2
import numpy as np

img = cv2.imread('lenna.png')

def nearest_interpolation(img):
    height, width, chanbels = img.shape
    emptyimg = np.zeros((700, 700, chanbels), np.uint8)
    sh = 800/height
    sw = 800/width
    for i in range(700):
        for j in range(700):
            x = int(i/sh + 0.5)
            y = int(j/sw + 0.5)
            emptyimg[i, j] = img[x, y]
    return emptyimg

def bilinear_interpolation(img, out_dim):
    src_h, src_w, channel = img.shape
    dst_h, dst_w = out_dim[0], out_dim[1]

    if src_h == dst_h and src_w == dst_w:
        return img.cppy()

    dst_img = np.zeros((dst_h, dst_w, channel), np.uint8)
    scale_x, scale_y = float(src_h/dst_h), float(src_w/dst_w)
    for i in range(channel):
        for dst_y in range(dst_h):
            for dst_x in range(dst_w):
                src_x = (dst_x + 0.5) * scale_x - 0.5
                src_y = (dst_y + 0.5) * scale_y - 0.5

                src_x0 = int(src_x + 0.5)
                src_x1 = min(src_x0 + 1, src_w - 1)
                src_y0 = int(src_y + 0.5)
                src_y1 = min(src_y0 + 1, src_h - 1)

                temp0 = (src_x1-src_x)*img[src_y0, src_x0, i] + (src_x-src_x0)*img[src_y0, src_x1, i]
                temp1 = (src_x1-src_x)*img[src_y1, src_x0, i] + (src_x-src_x0)*img[src_y1, src_x1, i]
                dst_img[dst_y, dst_x, i] = int((src_y1-src_y)*temp0 + (src_y-src_y0)*temp1)

    return dst_img

img_nearest = nearest_interpolation(img)
img_bilinear_interpolation = bilinear_interpolation(img,(700, 700))
cv2.imshow("nearest interp", img_nearest)
cv2.imshow('bilinear_interpolation', img_bilinear_interpolation)
cv2.imshow("image", img)
cv2.waitKey(0)
