# PCA
# 20240928 徐凯

import numpy as np


class CPCA(object):
    def __init__(self, X, K):
        self.X = X  # 原始矩阵x
        self.K = K  # 降维
        self.centerX = self._centralized()  # 原始矩阵中心化
        self.C = self._cov()  # 协方差矩阵
        self.U = self._U()  # 降维转换矩阵
        self.Z = self._Z()  # 目标矩阵

    def _centralized(self):
        mean = np.array([np.mean(attr) for attr in self.X.T])
        print('样本特征均值：\n', mean)
        center_x = self.X - mean
        return center_x

    def _cov(self):
        ns = np.shape(self.centerX)[0]
        C = np.dot(self.centerX.T, self.centerX)/(ns - 1)
        print('协方差矩阵cov：\n', C)
        return C

    def _U(self):
        a, b = np.linalg.eig(self.C)
        print('样本集的协方差矩阵C的特征值:\n', a)
        print('样本集的协方差矩阵C的特征向量:\n', b)
        ind = np.argsort(-1*a)
        UT = [b[:, ind[i]] for i in range(self.K)]
        U = np.transpose(UT)
        print(U)
        return U

    def _Z(self):
        print(self.X.shape, self.U.shape)
        Z = np.dot(self.X, self.U)
        print('样本矩阵X的降维矩阵Z:\n', Z)
        return Z


if __name__ == '__main__':
    X = np.array([[10, 15, 29],
                  [15, 46, 13],
                  [23, 21, 30],
                  [11, 9,  35],
                  [42, 45, 11],
                  [9,  48, 5],
                  [11, 21, 14],
                  [8,  5,  15],
                  [11, 12, 21],
                  [21, 20, 25]])
    K = np.shape(X)[1] - 1
    pca = CPCA(X, K)
