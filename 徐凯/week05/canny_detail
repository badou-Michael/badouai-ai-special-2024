# canny_detail
# 1018 xukai

import cv2
import numpy as np
from matplotlib import pyplot as plt
import math

if __name__ == "__main__":
# 1、灰度化
  img_gray = cv2.imread('lenna.png', 0)
  # cv2.imshow('img_gray', img_gray)
  plt.subplot(231), plt.imshow(img_gray, cmap='gray'), plt.title('Gray')

# 2、高斯滤波
  sigma = 1.5
  dim = 5
  Guassian_filter = np.zeros([dim, dim])
  tmp = [i-dim//2 for i in range(dim)]
  n1 = 1/(2*math.pi*sigma**2)
  n2 = -1/(2*sigma**2)
  for i in range(dim):
      for j in range(dim):
          Guassian_filter[i, j] = n1*math.exp(n2*(tmp[i]**2 + tmp[j]**2))
  Guassian_filter = Guassian_filter / Guassian_filter.sum()
  dx, dy = img_gray.shape
  img_new = np.zeros(img_gray.shape)
  tmp = dim//2
  img_pad = np.pad(img_gray, ((tmp, tmp), (tmp, tmp)), 'constant')
  for i in range(dx):
      for j in range(dy):
          img_new[i, j] = np.sum(img_pad[i:i+dim, j:j+dim]*Guassian_filter)
  plt.subplot(232), plt.imshow(img_new.astype(np.uint8), cmap='gray'), plt.title('Guassian_filter')

# 3、求梯度（soble算子）
  soble_kernel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
  soble_kernel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
  img_tidu_x = np.zeros(img_new.shape)
  img_tidu_y = np.zeros([dx,dy])
  img_tidu = np.zeros(img_new.shape)
  img_pad_soble = np.pad(img_new, ((1, 1), (1, 1)), 'constant')
  for i in range(dx):
      for j in range(dy):
          img_tidu_x[i, j] = np.sum(img_pad_soble[i:i+3, j:j+3] * soble_kernel_x)
          img_tidu_y[i, j] = np.sum(img_pad_soble[i:i+3, j:j+3] * soble_kernel_y)
          img_tidu[i, j ] = np.sqrt(img_tidu_x[i, j]**2 + img_tidu_y[i, j]**2)
          img_tidu_x[img_tidu_x == 0] = 0.00000001
          angle = img_tidu_y/img_tidu_x
  plt.subplot(233), plt.imshow(img_tidu.astype(np.uint8), cmap='gray'), plt.title('Soble_filter')
  plt.show()
# 4、非极大值抑制
  img_yizhi = np.zeros(img_tidu.shape)
  for i in range(1, dx-1):
      for j in range(1, dy-1):
          flag = True
          tmp = img_tidu[i-1:i+2, j-1:j+2]
          if angle[i, j] <= -1:
              num_1 = (tmp[0, 1] - tmp[0, 0]) / angle[i, j] + tmp[0, 1]
              num_2 = (tmp[2, 1] - tmp[2, 2]) / angle[i, j] + tmp[2, 1]
              if not (img_tidu[i, j] > num_1 and img_tidu[i, j] > num_2):
                  flag = False
          elif angle[i, j] >= -1:
              num_1 = (tmp[0, 2] - tmp[0, 1]) / angle[i, j] + tmp[0, 1]
              num_2 = (tmp[2, 0] - tmp[2, 1]) / angle[i, j] + tmp[2, 1]
              if not (img_tidu[i, j] > num_1 and img_tidu[i, j] > num_2):
                  flag = False
          elif angle[i, j] > 0:
              num_1 = (tmp[0, 2] - tmp[1, 2]) * angle[i, j] + tmp[1, 2]
              num_2 = (tmp[2, 0] - tmp[1, 0]) * angle[i, j] + tmp[1, 0]
              if not (img_tidu[i, j] > num_1 and img_tidu[i, j] > num_2):
                  flag = False
          elif angle[i, j] < 0:
              num_1 = (tmp[1, 0] - tmp[0, 0]) * angle[i, j] + tmp[1, 0]
              num_2 = (tmp[1, 2] - tmp[2, 2]) * angle[i, j] + tmp[1, 2]
              if not (img_tidu[i, j] > num_1 and img_tidu[i, j] > num_2):
                  flag = False
          if flag:
              img_yizhi[i, j] = img_tidu[i, j]
  plt.subplot(234), plt.imshow(img_yizhi.astype(np.uint8), cmap='gray'), plt.title('img_yizhi')

# 5、双阈值检测
  lower_boundary = img_tidu.mean()*0.5
  high_boundary = lower_boundary*3
  zhan = []
  for i in range(1, img_yizhi.shape[0]-1):
    for j in range(1, img_yizhi.shape[1]-1):
      if img_yizhi[i, j] >= high_boundary:
        img_yizhi[i,j] = 255
        zhan.append([i, j])
      elif img_yizhi[i, j] <= lower_boundary:
        img_yizhi[i,j] = 0

  while not len(zhan) == 0:
    temp_1, temp_2 = zhan.pop()
    a = img_yizhi[temp_1-1:temp_1+2, temp_2-1:temp_2+2]
    if (a[0, 0] > lower_boundary) and (a[0, 0] < high_boundary):
      img_yizhi[temp_1-1, temp_2-1] = 255
      zhan.append([temp_1-1, temp_2-1])
    if (a[0, 1] < high_boundary) and (a[0, 1] > lower_boundary):
      img_yizhi[temp_1-1, temp_2] = 255
      zhan.append([temp_1-1, temp_2])
    if (a[0, 2] < high_boundary) and (a[0, 2] > lower_boundary):
      img_yizhi[temp_1-1, temp_2 + 1] = 255
      zhan.append([temp_1-1, temp_2 + 1])
    if (a[1, 0] < high_boundary) and (a[1, 0] > lower_boundary):
      img_yizhi[temp_1, temp_2 - 1] = 255
      zhan.append([temp_1, temp_2 - 1])
    if (a[1, 2] < high_boundary) and (a[1, 2] > lower_boundary):
      img_yizhi[temp_1, temp_2 + 1] = 255
      zhan.append([temp_1, temp_2 + 1])
    if (a[2, 0] < high_boundary) and (a[2, 0] > lower_boundary):
      img_yizhi[temp_1 + 1, temp_2 - 1] = 255
      zhan.append([temp_1 + 1, temp_2 - 1])
    if (a[2, 1] < high_boundary) and (a[2, 1] > lower_boundary):
      img_yizhi[temp_1 + 1, temp_2] = 255
      zhan.append([temp_1 + 1, temp_2])
    if (a[2, 2] < high_boundary) and (a[2, 2] > lower_boundary):
      img_yizhi[temp_1 + 1, temp_2 + 1] = 255
      zhan.append([temp_1 + 1, temp_2 + 1])

  for i in range(img_yizhi.shape[0]):
    for j in range(img_yizhi.shape[1]):
      if img_yizhi[i,j] != 0 and img_yizhi[i,j] != 255:
        img_yizhi[i,j] = 0
  plt.subplot(235), plt.imshow(img_yizhi.astype(np.uint8), cmap='gray'), plt.title('img_canny')
  plt.show()
