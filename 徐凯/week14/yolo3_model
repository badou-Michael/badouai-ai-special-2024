import numpy as np
import tensorflow as tf
import os


class yolo:
    def __init__(self, norm_epsilon, norm_decay, anchors_path, classes_path, pre_trian):
        self.norm_epsilon = norm_epsilon
        self.norm_decay = norm_decay
        self.anchors_path = anchors_path
        self.classes_path = classes_path
        self.per_trian = pre_trian

        self.anchors = self._get_anchors()
        self.classes = self._get_classes()

    # 获取anchors
    def _get_anchors(self):
        anchors_path = os.path.expanduser(self.anchors_path)
        with open(anchors_path) as f:
            anchors = f.readlines()
        anchors = [float(x) for x in anchors.split(',')]
        return np.array(anchors).reshape(-1, 2)

    # 获取类别名字
    def _get_classes(self):
        classes_path = os.path.expanduser(self.classes_path)
        with open(classes_path) as f:
            class_names = f.readlines()
        # strip去除class_name后面的/n
        class_names = [c.strip() for c in class_names]
        return class_names

    # 定义BN层，加入L2正则化，防止过拟合
    def _batch_normalization_layer(self, input_layer, name = None, training = True, norm_decay = 0.99, norm_epsilon = 1e-3):
        bn_layer = tf.layers.batch_normalization(inputs=input_layer,
                                                 momentum=norm_decay,
                                                 epsilon=norm_epsilon,
                                                 training=training,
                                                 name=name)
        return tf.nn.leaky_relu(bn_layer, alpha=0.1)

    # 定义Darknet卷积块
    def _conv2d_layer(self, inputs, filters_nums, kernel_size, name, use_bias = False, strides = 1):
        conv = tf.layers.conv2d(inputs=inputs,
                                filters=filters_nums,
                                kernel_size=kernel_size,
                                strides=[strides, strides],
                                kernel_initializer=tf.glorot_uniform_initializer(),
                                padding=('SAME' if strides == 1 else 'VALID'),
                                # l2正则化，强度为5*0.0001
                                kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=5e-4),
                                use_bias=use_bias,
                                name=name)
        return conv

    # 定义Darknet残差卷积块
    def _Residual_block(self,inputs, filters_num, blocks_num, conv_index, training=True, norm_decay=0.99, norm_epsilon=1e-3):
        # padding
        inputs = tf.pad(inputs, paddings=[[0, 0], [1, 0], [1, 0], [0, 0]], mode='CONSTANT')
        # 3*3
        x = self._conv2d_layer(inputs, filters_num, kernel_size=3, strides=2, name='conv2d_'+str(conv_index))
        x = self._batch_normalization_layer(x,
                                            name='batch_normalization_'+str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1

        for _ in range(blocks_num):
            shortcut = x
            # 1*1
            x = self._conv2d_layer(x,
                                   filters_num//2,
                                   kernel_size=1,
                                   strides=1,
                                   name='conv2d'+str(conv_index))
            x = self._batch_normalization_layer(x,
                                                name='batch_normalization_'+str(conv_index),
                                                training=training,
                                                norm_decay=norm_decay,
                                                norm_epsilon=norm_epsilon)
            # 3*3
            x = self._conv2d_layer(x,
                                   filters_num,
                                   kernel_size=3,
                                   strides=1,
                                   name='conv2d' + str(conv_index))
            x = self._batch_normalization_layer(x,
                                                name='batch_normalization_' + str(conv_index),
                                                training=training,
                                                norm_decay=norm_decay,
                                                norm_epsilon=norm_epsilon)
            conv_index += 1
            x += shortcut
        return x, conv_index

    # 构建darknet53网络结构
    def _darknet53(self, inputs, conv_index, training=True, norm_decay=0.99, norm_epsilon=1e-3):
        # 创建一个作用域
        with tf.variable_scope('darknet53'):
            # 416,416,3 -> 416,416,32
            x = self._conv2d_layer(inputs,
                                      filters_nums=32,
                                      kernel_size=3,
                                      strides=1,
                                      name='conv2d_'+str(conv_index))
            x = self._batch_normalization_layer(x,
                                                name='batch_normalization_' + str(conv_index),
                                                training=training,
                                                norm_decay=norm_decay,
                                                norm_epsilon=norm_epsilon)
            conv_index += 1
            # 416,416,32 -> 208,208,64
            x, conv_index = self._Residual_block(x,
                                                 conv_index=conv_index,
                                                 filters_num=64,
                                                 blocks_num=1,
                                                 training=training,
                                                 norm_decay=norm_decay,
                                                 norm_epsilon=norm_epsilon)
            # 208,208,64 -> 104,104,128
            x, conv_index = self._Residual_block(x,
                                                 conv_index=conv_index,
                                                 filters_num=128,
                                                 blocks_num=2,
                                                 training=training,
                                                 norm_decay=norm_decay,
                                                 norm_epsilon=norm_epsilon)
            # 104,104,128 -> 52,52,256
            x, conv_index = self._Residual_block(x,
                                                 conv_index=conv_index,
                                                 filters_num=256,
                                                 blocks_num=8,
                                                 training=training,
                                                 norm_decay=norm_decay,
                                                 norm_epsilon=norm_epsilon)
            route1 = x
            # 52,52,256 -> 26,26,512
            x, conv_index = self._Residual_block(x,
                                                 conv_index=conv_index,
                                                 filters_num=512,
                                                 blocks_num=8,
                                                 training=training,
                                                 norm_decay=norm_decay,
                                                 norm_epsilon=norm_epsilon)
            route2 = x
            # 26,26,512 -> 13,13,1024
            x, conv_index = self._Residual_block(x,
                                                 conv_index=conv_index,
                                                 filters_num=1024,
                                                 blocks_num=4,
                                                 training=training,
                                                 norm_decay=norm_decay,
                                                 norm_epsilon=norm_epsilon)
            return route1, route2, x, conv_index

        # 构建yolo块
    def _yolo_block(self, inputs, filters_num, out_filters, conv_index, training=True, norm_decay=0.99, norm_epsilon=1e-3):
        # 1*1
        x = self._conv2d_layer(inputs,
                               filters_nums=filters_num,
                               kernel_size=1,
                               strides=1,
                               name='conv2d_' + str(conv_index))
        x = self._batch_normalization_layer(x,
                                            name='batch_normalization_' + str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1
        # 3*3
        x = self._conv2d_layer(inputs,
                               filters_nums=filters_num*2,
                               kernel_size=3,
                               strides=1,
                               name='conv2d_' + str(conv_index))
        x = self._batch_normalization_layer(x,
                                            name='batch_normalization_' + str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1
        # 1*1
        x = self._conv2d_layer(inputs,
                               filters_nums=filters_num,
                               kernel_size=1,
                               strides=1,
                               name='conv2d_' + str(conv_index))
        x = self._batch_normalization_layer(x,
                                            name='batch_normalization_' + str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1
        # 3*3
        x = self._conv2d_layer(inputs,
                               filters_nums=filters_num * 2,
                               kernel_size=3,
                               strides=1,
                               name='conv2d_' + str(conv_index))
        x = self._batch_normalization_layer(x,
                                            name='batch_normalization_' + str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1
        # 1*1
        x = self._conv2d_layer(inputs,
                               filters_nums=filters_num,
                               kernel_size=1,
                               strides=1,
                               name='conv2d_' + str(conv_index))
        x = self._batch_normalization_layer(x,
                                            name='batch_normalization_' + str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1
        route = x
        # 3*3
        x = self._conv2d_layer(inputs,
                               filters_nums=filters_num * 2,
                               kernel_size=3,
                               strides=1,
                               name='conv2d_' + str(conv_index))
        x = self._batch_normalization_layer(x,
                                            name='batch_normalization_' + str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1
        # 1*1
        x = self._conv2d_layer(inputs,
                               filters_nums=filters_num,
                               kernel_size=1,
                               strides=1,
                               name='conv2d_' + str(conv_index))
        x = self._batch_normalization_layer(x,
                                            name='batch_normalization_' + str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1
        return route, x, conv_index

    # 根据上面的模块构建yolo3的模型结构
    def yolo_inference(self, inputs,num_anchors, num_classes, training=True):
        conv_index = 1
        conv2d_26, conv2d_43, conv, conv_index = self._darknet53(inputs,
                                                                 conv_index,
                                                                 training=training,
                                                                 norm_decay=self.norm_decay,
                                                                 norm_epsilon=self.norm_epsilon)
        with tf.variable_scope('yolo')：
        # 第一个特征层
        conv2d_57, conv2d_59, conv_index = self._yolo_block(conv,
                                                            512,
                                                            num_anchors*(num_classes+5),
                                                            conv_index=conv_index,
                                                            training=training,
                                                            norm_decay=self.norm_decay,
                                                            norm_epsilon=self.norm_epsilon)
        # 第二个特征层
        conv2d_60 = self._conv2d_layer(conv2d_57,
                                       filters_nums=256,
                                       kernel_size=1,
                                       strides=1,
                                       name='conv2d_'+str(conv_index))
        conv2d_60 = self._batch_normalization_layer(conv2d_60,
                                            name='batch_normalization_' + str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1
        # 上采样
        unSample_0 = tf.image.resize_nearest_neighbor(conv2d_60,
                                                      [2 * tf.shape(conv2d_60)[1], 2 * tf.shape(conv2d_60)[1]],
                                                      name='upSample_0')
        route0 = tf.concat([unSample_0, conv2d_43], axis=-1, name='route_0')
        conv2d_65, conv2d_67, conv_index = self._yolo_block(route0,
                                                            256,
                                                            num_anchors * (num_classes + 5),
                                                            conv_index=conv_index,
                                                            training=training,
                                                            norm_decay=self.norm_decay,
                                                            norm_epsilon=self.norm_epsilon)
        # 第三个特征层
        conv2d_68 = self._conv2d_layer(conv2d_65,
                                       filters_nums=128,
                                       kernel_size=1,
                                       strides=1,
                                       name='conv2d_'+str(conv_index))
        conv2d_60 = self._batch_normalization_layer(conv2d_68,
                                            name='batch_normalization_' + str(conv_index),
                                            training=training,
                                            norm_decay=norm_decay,
                                            norm_epsilon=norm_epsilon)
        conv_index += 1
        unSample_1 = tf.image.resize_nearest_neighbor(conv2d_68,
                                                      [2 * tf.shape(conv2d_60)[1], 2 * tf.shape(conv2d_60)[1]],
                                                      name='upSample_0')
        route1 = tf.concat([unSample_1, conv2d_43], axis=-1, name='route_1')
        _, conv2d_75, _ = self._yolo_block(route1,
                                           128,
                                           num_anchors * (num_classes + 5),
                                           conv_index=conv_index,
                                           training=training,
                                           norm_decay=self.norm_decay,
                                           norm_epsilon=self.norm_epsilon)
        # 输出三个不同尺度的特征层，在perdict里进行解码
        # 每个特征层的输出包含预测边界框的位置、尺寸、置信度以及类别概率
        return [conv2d_59, conv2d_67, conv2d_75]
