import tensorflow as tf
import numpy as np
from yolo_predict import yolo_predictor
from PIL import Image, ImageFont, ImageDraw
from torch.nn.parallel import DistributedDataParallel as DDP
import os

# 指定使用GPU的Index
# os.environ['CUDA_VISIBLE_DEVICES'] = config.gpu_index
os.environ['CUDA_VISIBLE_DEVICES'] = -1


# 对预测的图像进行缩放处理
def letterbox_image(image, out_size):
    image_w, image_h = image.size    # PIL：.size属性返回(width, height)；cv2：h,w
    w, h = out_size
    new_w = int(image_w * min(w*1.0/image_w, h*1.0/image_h))
    new_h = int(image_h * min(w*1.0/image_w, h*1.0/image_h))
    resized_image = image.resize((new_w, new_h), Image.BICUBIC)
    
    # 创建一个新的图像对象（画布），rgb模式，out-size尺寸，灰色填充
    boxed_image = Image.new('RGB', out_size, (128, 128, 128))
    # 将resized_image粘贴到boxed-image的中心区域
    boxed_image.paste(resized_image, ((w-new_w)//2, (h-new_h)//2))

    # 输出out_size的boxed_image
    return boxed_image


# 加载预训练好的Darknet53权重文件
# var_list: 赋值变量名
def load_weights(var_list, weights_file):
    with open(weights_file, 'rb') as fp:
        _ = np.fromfile(fp, dtype=np.int32, count=5)
        weights = np.fromfile(fp, dtype=np.float32)

    ptr = 0
    i = 0
    assign_ops = []
    while i < len(var_list) - 1:
        var1 = var_list[i]
        var2 = var_list[i+1]
        if 'conv2d' in var1.name.split(',')[-2]:
            if 'batch_normalization' in var2.name.split('/')[-2]:
                gamma, beta, mean, var = var_list[i+1:i+5]
                batch_norm_vars = [gamma, beta, mean, var]
                for var in batch_norm_vars:
                    shape = var.shape.as_list()
                    num_params = np.prod(shape)
                    var_weights = weights[ptr:ptr+num_params].reshape(shape)
                    ptr += num_params
                    assign_ops.append(tf.assign(var, var_weights, validate_shape=True))
                i += 4
            elif 'conv2d' in var2.name.split('/')[-2]:
                bias = var2
                bias_shape = bias.shape.as_list()
                bias_params = np.prod(bias_shape)
                bias_weights = weights[ptr:ptr + bias_params].reshape(bias_shape)
                ptr += bias_params
                assign_ops.append(tf.assign(bias, bias_weights, validate_shape=True))
                i += 1

            shape = var1.shape.as_list()
            num_params = np.prod(shape)

            var_weights = weights[ptr:ptr + num_params].reshape((shape[3], shape[2], shape[0], shape[1]))
            var_weights = np.transpose(var_weights, (2, 3, 1, 0))
            ptr += num_params
            assign_ops.append(tf.assign(var1, var_weights, validate_shape=True))
            i += 1

        return assign_ops

# 加载模型，权重进行目标检测
def detect(image_path, model_path, yolo_wighs = None):
    image = Image.open(image_path)
    resize_image = letterbox_image(image, (416, 416))
    image_data = np.array(resize_image, dtype=np.float32)
    image_data /= 255.
    # 转格式，第一维度填充，3 -> 4
    image_data = np.expand_dims(image_data, axis=0)
    # input_image_shape原图的size
    input_image_shape = tf.placeholder(dtype=tf.int32, shape=(2,))
    input_image = tf.placeholder(shape=[None, 416, 416, 3], dtype=tf.float32)

    # 放入pre里进行预测
    predictor = yolo_predictor(config.obj_threshold, config.nms_threshold, config.classes_path, config.anchors_path)
    with tf.Session() as sess:

        if yolo_wights is not None:
            with tf.variable_scope('predict'):
                boxes, scores, classes = predictor.predict(input_image, input_image_shape)
            # 载入权重
            load_op = load_weights(tf.global_variables(scope='predict'),weights_file=yolo_wighs)
            sess.run(load_op)

            out_boxes, out_scores, out_classes = sess.run([boxes, scores, classes],
                                                      feed_dict={input_image: image_data,
                                                                 input_image_shape: [image.size[1],
                                                                 image.size[0]]})
        # 加载检查点模型ckpt
        else:
            boxes, scores, classes = predictor.predict(input_image, input_image_shape)
            saver = tf.train.Saver()
            saver.restore(sess, model_path)
            out_boxes, out_scores, out_classes = sess.run([boxes, scores, classes],
                                                           feed_dict={input_image: image_data,
                                                                      input_image_shape: [image.size[1],
                                                                      image.size[0]]})

        # 打印出pre里找出的框
        print('Found {} boxes for {}'.format(len(out_boxes),'img'))
        # 字体设置
        font = ImageFont.truetype(font = 'font/FiraMono-Medium.otf',
                                  size = np.floor(3e-2 * image.size[1] + 0.5).astype('int32'))
        # 线条设置
        thickness = (image.size[0] + image.size[1]) // 300

        for i, c in reversed(list(enumerate(out_classes))):
            predict_class = predictor.class_names[c]
            box = out_boxes[i]
            score = out_scores[i]
            # 标签
            label = '{} {:.2f}'.format(predict_class, score)

            # 创建一个draw对象
            draw = ImageDraw.Draw(image)
            label_size = draw.textsize(label, font)

            # 四个边
            top, left, bottom, right = box
            top = max(0, np.floor(top+0.5).astype('int32'))
            left = max(0, np.floor(left + 0.5).astype('int32'))
            bottom = min(image.size[1] - 1, np.floor(bottom + 0.5).astype('int32'))
            right = min(image.size[0] - 1, np.floor(right + 0.5).astype('int32'))

            # 确定标签与框的位置
            if top - label_size[1] >= 0:
                text_origin = np.array([left, top - label_size[1]])
            else:
                text_origin = np.array([left, top + 1])

            for i in range(thickness):
                draw.rectangle([left+i,
                                top+i,
                                right-i,
                                bottom-i],
                               outline=predictor.colors[c])
            draw.rectangle([tuple(text_origin),
                            tuple(text_origin+label_size)],
                           fill=predictor.colors[c])
            draw.text(text_origin, label, fill=(0,0,0), font=font)
            del draw
        image.show()
        image.save('./img/**.jpg')


if __name__ == 'main' :
    if config.pre_train_yolo3 == True:
        detect(config.image_file, config.model_dir, config.yolo3_weights_path)

    else:
        detect(config.image_file, config.model_dir)
