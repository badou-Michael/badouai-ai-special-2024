import numpy as np
import matplotlib.pyplot as plt
from pycocotools.coco import COCO


# 计算box的hw，以及和原始图像的hw_scale
def convert_coco_bbox(size, box):
    dw = 1./size[0]
    dh = 1./size[1]
    x = (box[0]+box[2])/2.0-1
    y = (box[1]+box[3])/2.0-1

    w = box[2]
    h = box[3]
    w = box[2]
    h = box[3]
    x = x * dw
    w = w * dw
    y = y * dh
    h = h * dh
    return x, y, w, h


# 计算每个box和聚类中心的距离值
def box_iou(boxes, clusters):
    box_num = boxes.shape[0]
    cluster_num = clusters.shape[0]
    box_area = boxes[:,0]*boxes[:,1]
    box_area = box_area.repeat(cluster_num)
    box_area = np.reshape(box_area, [box_num, cluster_num])

    cluster_area = clusters[:,0]*clusters[:,1]
    cluster_area = np.tile(cluster_area, [1, box_num])
    cluster_area = np.reshape(cluster_area, [box_num, cluster_num])

    boxes_width = np.reshape(boxes[:, 0].repeat(cluster_num), [box_num, cluster_num])
    clusters_width = np.reshape(np.tile(clusters[:, 0], [1, box_num]), [box_num, cluster_num])
    min_width = np.minimum(clusters_width, boxes_width)

    boxes_high = np.reshape(boxes[:, 1].repeat(cluster_num), [box_num, cluster_num])
    clusters_high = np.reshape(np.tile(clusters[:, 1], [1, box_num]), [box_num, cluster_num])
    min_high = np.minimum(clusters_high, boxes_high)
    
    iou = np.multiply(min_high, min_width) / (box_area + cluster_area - np.multiply(min_high, min_width))
    return iou


# 计算所有box和聚类中心的最大iou均值作为准确率
def avg_iou(boxes, clusters):
    return np.mean(np.max(box_iou(boxes, clusters),axis=1))


def Kmeans(boxes, cluster_num, iteration_cutoff = 20, function = np.median):
    boxes_num = boxes.shape[0]
    best_average_iou = 0
    best_avg_iou_iteration = 0  # 迭代次数
    best_clusters = []
    anchors = []
    np.random.seed()
    # 从boxes数组中随机且不重复地选择cluster_num个元素，并将这些元素组成新的数组clusters聚类中心
    clusters = boxes[np.random.choice(boxes_num, cluster_num, replace=False)]
    # count跟踪迭代次数
    count = 0
    # 无限循环，直到某个条件满足
    while True:
        distances = 1. - box_iou(boxes, clusters)
        # 每个边界框到所有簇中心的距离中的最小值
        boxes_iou = np.min(distances, axis=1)
        # 返回沿指定轴的最小值的索引。它用来找出每个边界框最接近哪个簇中心
        current_box_cluster = np.argmin(distances, axis=1)
        # 更高的average_iou表明边界框更紧密地匹配它们分配的簇中心
        average_iou = np.mean(1. - boxes_iou)

        if average_iou > best_average_iou:
            best_average_iou = average_iou
            best_clusters = clusters
            best_avg_iou_iteration = count

        # 通过function的方式更新聚类中心
        for cluster in range(cluster_num):
            clusters[cluster] = function(boxes[current_box_cluster == cluster], axis=0)
        if count >= best_avg_iou_iteration + iteration_cutoff:
            break
        print("Sum of all distances (cost) = {}".format(np.sum(boxes_iou)))
        print("iter: {} Accuracy: {:.2f}%".format(count, avg_iou(boxes, clusters) * 100))
        count += 1
    for cluster in best_clusters:
        anchors.append([round(cluster[0] * 416), round(cluster[1] * 416)])
    return anchors, best_average_iou


# 读取coco标注信息
def load_cocoDataset(annfile):
    # data 储存转换后的边界框数据
    data = []
    coco = COCO(annfile)
    # coco.getCatIds()返回数据集中所有类别对应的 ID 的列表
    # coco.loadCats(catIds)接收由 getCatIds() 返回的类别 ID 列表，并为每个 ID 加载对应的类别信息，它返回的是一个字典列表
    cats = coco.loadCats(coco.getCatIds())
    # 从 COCO 数据集中加载一个或多个图像的信息
    # coco.loadImgs()
    # 创建一个字典推导式{id1:name1, id2:name2, ...}
    base_classes = {cat['id']: cat['name'] for cat in cats}
    # 最终结果是一个列表，每个元素对应于 base_classes 中的每一个类别，并且包含了所有含有该类别的图像的ID
    imgId_catIds = [coco.getImgIds(catIds=cat_ids) for cat_ids in base_classes.keys()]
    # 从imgId_catIds这个列表中提取所有的img_id
    image_ids = [img_id for img_cat_id in imgId_catIds for img_id in img_cat_id]

    for image_id in image_ids:
        # 获取给定 image_id 的所有注释ID
        annIds = coco.getAnnIds(imgIds=image_id)
        # 使用 annIds 加载实际的注释信息到 anns 列表中。每个注释都包含有关图像中标记对象的信息，比如边界框坐标、类别ID等
        anns = coco.loadAnns(annIds)
        # 从 coco 对象中加载图像元数据，并提取图像的宽度和高度
        img = coco.loadImgs(image_id)[0]
        image_width = img['width']
        image_height = img['height']

        # 遍历注释并转换边界框
        for ann in anns:
            # 从中提取边界框 (bbox) 信息
            box = ann['bbox']
            # 调用 convert_coco_bbox 函数来将 COCO 格式的边界框转换为四元素的元组
            bb = convert_coco_bbox((image_width, image_height), box)
            # 将hw信息添加到data里
            data.append(bb[2:])
    return np.array(data)


def process(dataFile, cluster_num, iteration_cutoff = 25, function = np.median):
    last_best_iou = 0
    last_anchors = []
    # 调用load_cocoDataset()函数获得boxes的hw信息
    boxes = load_cocoDataset(dataFile)
    # 取前1000个元素
    box_w = boxes[:1000, 0]
    box_h = boxes[:1000, 1]
    plt.scatter(box_h, box_w, c='r')
    # 调用Kmeans函数
    anchors = Kmeans(boxes, cluster_num, iteration_cutoff, function)
    plt.scatter(anchors[:, 0], anchors[:, 1], c='b')
    plt.show()
    for _ in range(100):
        anchors, best_iou = Kmeans(boxes, cluster_num, iteration_cutoff, function)
        if best_iou > last_best_iou:
            last_anchors = anchors
            last_best_iou = best_iou
            print("anchors: {}, avg iou: {}".format(last_anchors, last_best_iou))
    print("final anchors: {}, avg iou: {}".format(last_anchors, last_best_iou))


if __name__ == '__main__':
    process('./annotations/instances_train2014.json', 9)
