import torch
import torchvision
from torchvision.models.detection import maskrcnn_resnet50_fpn
from PIL import Image
import numpy as np
import cv2

# 加载预训练模型
model = maskrcnn_resnet50_fpn(pretrained=True)
model.eval()


# 加载图像并进行预处理
def preprocess_image(image):
    transform = torchvision.transforms.Compose([
        torchvision.transforms.ToTensor(), ])
    return transform(image).unsqueeze(0)  # 添加batch维度


# 推理
def infer(image_path):
    image = Image.open(image_path).convert("RGB")
    image_tensor = preprocess_image(image)

    with torch.no_grad():
        prediction = model(image_tensor)

    return prediction


def show_result(image, predictions):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    # 创建一个字典来保存类别的颜色
    instance_colors = {}
    for pred in predictions:
        masks = pred['masks'].numpy()
        labels = pred['labels'].numpy()
        scores = pred['scores'].numpy()
        for i, (mask, label, score) in enumerate(zip(masks, labels, scores)):
            if score > 0.5:
                mask = mask[0]
                mask = (mask > 0.5).astype(np.uint8)
                if i not in instance_colors:
                    instance_colors[i] = (np.random.randint(0, 256), np.random.randint(0, 256), np.random.randint(0, 256))
                color = instance_colors[i]
                contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
                cv2.drawContours(image, contours, -1, color, 2)

    cv2.imshow('Result1', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def show_result_2(image, predictions):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    color_mapping = {
        1: (255, 0, 0),  # 人用蓝色表示
        2: (0, 255, 0),  # 自行车用绿色表示
        3: (0, 0, 255)   # 汽车用红色表示
    }
    for pred in predictions:
        masks = pred['masks'].numpy()
        labels = pred['labels'].numpy()
        scores = pred['scores'].numpy()
        for mask, label, score in zip(masks, labels, scores):
            if score > 0.5:
                mask = mask[0]
                mask = (mask > 0.5).astype(np.uint8)
                color = color_mapping.get(label.item(), (255, 255, 255))
                contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
                cv2.drawContours(image, contours, -1, color, 2)
    image = cv2.resize(image, (700, 700))
    cv2.imshow('Result2', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


# 使用示例
image_path = 'street.jpg'  # 替换为你的图像路径
prediction = infer(image_path)
image = Image.open(image_path)

image1 = show_result(image, prediction)
image2 = show_result_2(image, prediction)
