# 文件名：Cifar10_data1.py
# 该模块负责读取 CIFAR-10 数据并对其进行数据增强和预处理

import os
import tensorflow as tf

# 设定用于训练和评估的样本总数
NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN = 50000
NUM_EXAMPLES_PER_EPOCH_FOR_EVAL = 10000

# 定义一个空类，用于返回读取的CIFAR-10数据
class CIFAR10Record(object):
    pass

# 定义读取CIFAR-10数据的函数
def read_cifar10(file_queue):
    result = CIFAR10Record()

    label_bytes = 1  # CIFAR-10中的标签字节数
    result.height = 32
    result.width = 32
    result.depth = 3  # RGB三通道

    image_bytes = result.height * result.width * result.depth
    record_bytes = label_bytes + image_bytes

    # 创建一个读取固定长度字节的 reader
    reader = tf.FixedLengthRecordReader(record_bytes=record_bytes)
    result.key, value = reader.read(file_queue)

    # 将字符串解析为uint8 张量
    record_bytes = tf.decode_raw(value, tf.uint8)

    # 提取标签并转换为int32
    result.label = tf.cast(
        tf.strided_slice(record_bytes, [0], [label_bytes]), tf.int32)

    # 提取图像数据并转换为[depth, height, width]
    depth_major = tf.reshape(
        tf.strided_slice(record_bytes, [label_bytes], [label_bytes + image_bytes]),
        [result.depth, result.height, result.width])

    # 转置为 [height, width, depth]
    result.uint8image = tf.transpose(depth_major, [1, 2, 0])

    return result

# 定义输入数据的预处理函数
def inputs(data_dir, batch_size, distorted):
    # 构建文件名列表，包含训练数据集的所有 batch 文件
    filenames = [os.path.join(data_dir, 'data_batch_%d.bin' % i)
                 for i in range(1, 6)]

    # 创建文件名队列
    file_queue = tf.train.string_input_producer(filenames)

    # 读取 CIFAR-10 数据
    read_input = read_cifar10(file_queue)

    # 将图像数据转换为 float32
    reshaped_image = tf.cast(read_input.uint8image, tf.float32)

    if distorted:
        # 对训练数据进行数据增强

        # 随机裁剪为 24x24
        cropped_image = tf.random_crop(reshaped_image, [24, 24, 3])

        # 随机左右翻转
        flipped_image = tf.image.random_flip_left_right(cropped_image)

        # 随机调整亮度和对比度
        adjusted_brightness = tf.image.random_brightness(flipped_image, max_delta=0.8)
        adjusted_contrast = tf.image.random_contrast(adjusted_brightness, lower=0.2, upper=1.8)

        # 标准化处理
        float_image = tf.image.per_image_standardization(adjusted_contrast)

        # 设置形状
        float_image.set_shape([24, 24, 3])
        read_input.label.set_shape([1])

        # 定义队列最小样本数
        min_fraction_of_examples_in_queue = 0.4
        min_queue_examples = int(NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN * min_fraction_of_examples_in_queue)

        print("Filling queue with %d CIFAR images before starting to train. "
              "This will take a few minutes." % min_queue_examples)

        # 生成乱序的 batch
        images_train, labels_train = tf.train.shuffle_batch(
            [float_image, read_input.label],
            batch_size=batch_size,
            num_threads=16,
            capacity=min_queue_examples + 3 * batch_size,
            min_after_dequeue=min_queue_examples)

        return images_train, tf.reshape(labels_train, [batch_size])

    else:
        # 对测试数据进行预处理

        # 裁剪或填充为 24x24
        resized_image = tf.image.resize_image_with_crop_or_pad(reshaped_image, 24, 24)

        # 标准化处理
        float_image = tf.image.per_image_standardization(resized_image)

        # 设置形状
        float_image.set_shape([24, 24, 3])
        read_input.label.set_shape([1])

        min_fraction_of_examples_in_queue = 0.4
        min_queue_examples = int(NUM_EXAMPLES_PER_EPOCH_FOR_EVAL * min_fraction_of_examples_in_queue)

        # 生成顺序的 batch
        images_test, labels_test = tf.train.batch(
            [float_image, read_input.label],
            batch_size=batch_size,
            num_threads=16,
            capacity=min_queue_examples + 3 * batch_size)

        return images_test, tf.reshape(labels_test, [batch_size])
