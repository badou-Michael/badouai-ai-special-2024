import matplotlib.pyplot as plt
import numpy as np
import PIL
import tensorflow as tf
import pathlib

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential

# 模型对花卉图像进行分类

dataset_url = r"C:\Users\ZHFWZX-02\Desktop\flower_photos"
data_dir = tf.keras.utils.get_file('flower_photos.tar', origin=dataset_url, extract=True)
data_dir = pathlib.Path(data_dir).with_suffix('')

# 获取数据集目录下的所有文件数量
image_count = len(list(data_dir.glob('*/*.jpg')))
print(image_count)

# 获取玫瑰的数据集
roses = list(data_dir.glob('success/*'))

PIL.Image.open(str(roses[0]))
PIL.Image.open(str(roses[1]))

# 获取郁金香的数据集
tulips = list(data_dir.glob('error/*'))
PIL.Image.open(str(tulips[0]))
PIL.Image.open(str(tulips[1]))

# 数据集提前定义参数
batch_size = 32
img_height = 180
img_width = 180

# image_dataset_from_directory  从磁盘高效加载数据集
# 模型训练前 使用验证拆分法 将 80% 的图像用于训练，将 20% 的图像用于验证。
# validation_split 设置为0.2，则将20%的数据作为验证集，剩余80%作为训练集
# subset 参数允许您指定要加载哪个部分。
# 在机器学习中，数据集经常被分为几个部分，如训练集（training set）、验证集（validation set）和测试集（test set
# subset设置为training 代表库只加载训练集
# seed 参数常用于设置随机数生成器的种子。设置种子的主要目的是为了使随机数生成过程可重复。这意味着每次使用相同的种子时，随机数生成器将会产生相同的序列
# batch_size是机器学习训练过程中数据的一种组织形式，它允许模型同时更新权重以反映一批数据的变化，而不是单个样本。这有助于提高计算效率，并有助于模型学习更广泛的模式。
# train_ds为训练数据集
train_ds = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="training",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size)

# val_ds为验证数据集
val_ds = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="validation",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size)
#
# 数据集的目录名称
class_names = train_ds.class_names
print(class_names)

# 设置宽高 单位英寸
plt.figure(figsize=(10, 10))

# 训练数据集中的前 9 个图像：
for images, labels in train_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        plt.title(class_names[labels[i]])
        plt.axis("off")

# 效果展示
plt.show()

for image_batch, labels_batch in train_ds:
    print(image_batch.shape)
    print(labels_batch.shape)
    break

# 配置数据集以提高性能（缓存到磁盘）
AUTOTUNE = tf.data.AUTOTUNE
# 训练数据集
# shuffle() 函数用于打乱数据
train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)
# 校验数据集
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)
# 标准化数据
normalization_layer = layers.Rescaling(1. / 255)

# 可以通过两种方式使用该层。您可以通过调用 Dataset.map 将其应用于数据集：
normalized_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
image_batch, labels_batch = next(iter(normalized_ds))
first_image = image_batch[0]
print(np.min(first_image), np.max(first_image))
num_classes = len(class_names)
# 模型创建 模型由三个卷积块组成
# Conv2D 卷积块 每个卷积块都有一个最大池化层
# MaxPooling2D 最大池化层
# ReLU 激活函数 ('relu') 激活
model = Sequential([
    layers.Rescaling(1. / 255, input_shape=(img_height, img_width, 3)),
    layers.Conv2D(16, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(32, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(64, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(num_classes)
])

# 编译模型  设置优化器、损失函数、评估指标
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# 使用 Model.summary 方法查看网络的所有层
model.summary()
epochs = 10

# 训练模型
# train_ds 训练数据集
# validation_data 验证数据集
# epochs 训练周期
history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=epochs
)

# 在训练集和验证集上创建损失和准确率的图表

# 训练和验证的准确性
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

# 训练和验证的损失
loss = history.history['loss']
val_loss = history.history['val_loss']

# epochs_range是训练机器学习模型时所使用的epoch 数量的范围。epoch 是指整个训练数据集被遍历一次的过程。
epochs_range = range(epochs)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()


# 数据增强 通过增强然后使用随机转换，从现有样本中生成其他训练数据
# 产生看起来可信的图像。这有助于向模型公开数据的更多方面，且有助于更好地进行泛化。
data_augmentation = keras.Sequential(
    [
        layers.RandomFlip("horizontal",
                          input_shape=(img_height,
                                       img_width,
                                       3)),
        layers.RandomRotation(0.1),
        layers.RandomZoom(0.1),
    ]
)

plt.figure(figsize=(10, 10))
for images, _ in train_ds.take(1):
    for i in range(9):
        augmented_images = data_augmentation(images)
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(augmented_images[0].numpy().astype("uint8"))
        plt.axis("off")

model = Sequential([
    data_augmentation,
    layers.Rescaling(1. / 255),
    layers.Conv2D(16, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(32, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(64, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Dropout(0.2),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(num_classes, name="outputs")
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.summary()

epochs = 15
history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=epochs
)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(epochs)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

# sunflower_url = "https://storage.googleapis.com/download.tensorflow.org/example_images/592px-Red_sunflower.jpg"
# sunflower_path = tf.keras.utils.get_file('Red_sunflower', origin=sunflower_url)

sunflower_path = tf.keras.utils.get_file("DJI_20240523133052_0111_T.JPG",
                                         "file:///C:/Users/ZHFWZX-02/Desktop/flower/DJI_20240523133052_0111_T.JPG")

img = tf.keras.utils.load_img(
    sunflower_path, target_size=(img_height, img_width)
)
img_array = tf.keras.utils.img_to_array(img)
img_array = tf.expand_dims(img_array, 0)  # Create a batch

predictions = model.predict(img_array)
score = tf.nn.softmax(predictions[0])

print(
    "这张图片最有可能属于{}有{:.2f}%的准确度."
    .format(class_names[np.argmax(score)], 100 * np.max(score))
)
