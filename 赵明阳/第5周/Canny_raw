import numpy as np
import matplotlib.pyplot as plt

def canny_edge_detection(image, low_threshold, high_threshold):
    # 1. 噪声抑制 - 使用高斯滤波
    blurred_image = gaussian_filter(image, 5)  # 使用5x5的高斯核

    # 2. 噪声抑制 - 使用高斯滤波
    blurred_image = gaussian_filter(image, 5)  # 使用5x5的高斯核

    # 2. 计算梯度幅值和方向
    gradient_magnitude, gradient_direction = compute_gradient(blurred_image)

    # 3. 非极大值抑制
    non_maxima_suppressed = non_maxima_suppression(gradient_magnitude, gradient_direction)

    # 4. 双阈值检测
    final_edges = double_threshold(non_maxima_suppressed, low_threshold, high_threshold)

    return final_edges

def gaussian_filter(image, kernel_size):
    # 生成高斯核
    sigma = kernel_size // 2
    x, y = np.mgrid[-sigma:sigma+1, -sigma:sigma+1]
    normal = 1 / (2.0 * np.pi * sigma**2)
    kernel = normal * np.exp(-(x**2 + y**2) / (2.0 * np.pi * sigma**2))

    # 对图像进行卷积操作
    filtered_image = np.zeros_like(image, dtype=np.float32)
    image_padded = np.pad(image, ((sigma, sigma), (sigma, sigma)), mode='constant')
    for i in range(image.shape[0]):
        for j in range(image.shape[1]):
            filtered_image[i, j] = np.sum(kernel * image_padded[i:i+kernel_size, j:j+kernel_size])

    return filtered_image

def compute_gradient(image):
    # 使用Sobel算子计算水平和垂直方向的梯度
    sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-3, 0, 3]])
    sobel_y = np.array([[-1, -2, -3], [0, 0, 0], [1, 2, 3]])

    gradient_x = np.zeros_like(image, dtype=np.float32)
    gradient_y = np.zeros_like(image, dtype=np.float32)

    image_padded = np.pad(image, ((1, 1), (1, 1)), mode='constant')
    for i in range(1, image.shape[0] + 1):
        for j in range(1, image.shape[1] + 1):
            gradient_x[i - 1, j - 1] = np.sum(sobel_x * image_padded[i-1:i+2, j-1:j+2])
            gradient_y[i - 1, j - 1] = np.sum(sobel_y * image_padded[i-1:i+2, j-1:j+2])

    # 计算梯度幅值和方向
    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)
    gradient_direction = np.arctan2(gradient_y, gradient_x) * 180 / np.pi

    return gradient_magnitude, gradient_direction

def non_maxima_suppression(gradient_magnitude, gradient_direction):
    non_maxima_suppressed = np.zeros_like(gradient_magnitude, dtype=np.float32)
    angle = gradient_direction % 180

    for i in range(1, gradient_magnitude.shape[0] - 1):
        for j in range(1, gradient_magnitude.shape[1] - 1):
            if (0 <= angle[i, j] < 22.5) or (157.5 <= angle[i, j] <= 180):
                if (gradient_magnitude[i, j] > gradient_magnitude[i, j - 1]) and (gradient_magnitude[i, j] > gradient_magnitude[i, j + 1]):
                    non_maxima_suppressed[i, j] = gradient_magnitude[i, j]
            elif (22.5 <= angle[i, j] < 67.5):
                if (gradient_magnitude[i, j] > gradient_magnitude[i - 1, j - 1]) and (gradient_magnitude[i, j] > gradient_magnitude[i + 1, j + 1]):
                    non_maxima_suppressed[i, j] = gradient_magnitude[i, j]
            elif (67.5 <= angle[i, j] < 112.5):
                if (gradient_magnitude[i, j] > gradient_magnitude[i - 1, j]) and (gradient_magnitude[i, j] > gradient_magnitude[i + 1, j]):
                    non_maxima_suppressed[i, j] = gradient_magnitude[i, j]
            elif (112.5 <= angle[i, j] < 157.5):
                if (gradient_magnitude[i, j] > gradient_magnitude[i - 1, j + 1]) and (gradient_magnitude[i, j] > gradient_magnitude[i + 1, j - 1]):
                    non_maxima_suppressed[i, j] = gradient_magnitude[i, j]

    return non_maxima_suppressed

def double_threshold(image, low_threshold, high_threshold):
    final_edges = np.zeros_like(image, dtype=np.float32)
    strong_edges = np.where(image >= high_threshold, 255, 0)
    weak_edges = np.where((image >= low_threshold) & (image < high_threshold), 128, 0)

    for i in range(1, image.shape[0] - 1):
        for j in range(1, image.shape[1] - 1):
            if weak_edges[i, j] == 128:
                if (strong_edges[i - 1, j - 1] == 255) or (strong_edges[i - 1, j] == 255) or (strong_edges[i - 1, j + 1] == 255) or (strong_edges[i, j - 1] == 255) or (strong_edges[i, j + 1] == 255) or (strong_edges[i + 1, j - 1] == 255) or (strong_edges[i + 1, j] == 255) or (strong_edges[i + 1, j + 1] == 255):
                    final_edges[i, j] = 255
                else:
                    final_edges[i, j] = 0
            elif strong_edges[i, j] == 255:
                final_edges[i, j] = 255

    return final_edges

# 读取图像
image = plt.imread('Buhda.jpg')
gray_image = np.mean(image, axis=-1).astype(np.uint8) if image.ndim == 3 else image

# 进行Canny边缘检测
edges = canny_edge_detection(gray_image, 50, 150)

# 显示结果
plt.imshow(edges, cmap='gray')
plt.show()
