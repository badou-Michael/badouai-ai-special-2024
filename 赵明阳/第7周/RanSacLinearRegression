import random
import math
import matplotlib.pyplot as plt
import numpy as np
#这段代码实现了随机抽样一致性（RANSAC）算法用于从一组二维点中拟合一条直线。具体来说，它从用户输入中获取一组二维点的坐标，然后使用 RANSAC 算法找到最佳拟合直线的参数（以直线方程 ax + by + c = 0 的形式表示）。
class Point2D:
    #这是类的构造函数，用于初始化二维点的坐标。默认情况下，点的坐标为 (0, 0)，但可以通过传入参数来指定不同的坐标值。
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
    #定义了两个Point2D对象相等的条件。这里判断两个点相等的标准是它们的 x 坐标和 y 坐标之差的绝对值都小于 1e-3。
    def __eq__(self, other):
        return abs(self.x - other.x) < 1e-3 and abs(self.y - other.y) < 1e-3

class Solution:
    # ransaclr方法：这是实现 RANSAC 算法的主要方法
    #首先，根据输入的点集pts的长度n以及给定的离群点概率outlier_prob和接受概率accept_prob计算需要的迭代次数K。
    def ransaclr(self, pts, outlier_prob=0.1, accept_prob=1e-3, threshold=10.0):
        n = len(pts)
        sample_fail_prob = 1 - (1 - outlier_prob)**2
        K = math.log(accept_prob) / math.log(sample_fail_prob)
    #然后，初始化变量a_res、b_res、c_res为None，并将最小误差min_error设置为无穷大。
        a_res, b_res, c_res = None, None, None
        min_error = float('inf')

        for k in range(int(K)):
            #随机选择两个不同的点p1和p2。如果随机选择的两个点相同，则继续随机选择，直到得到两个不同的点。
            p1, p2 = random.choice(pts), random.choice(pts)
            while p1 == p2:
                p1, p2 = random.choice(pts), random.choice(pts)
            #根据选择的两个点计算直线方程的参数a、b、c，并进行归一化处理，使得sqrt(a*a + b*b)=1。
            a = p1.y - p2.y
            b = p2.x - p1.x
            c = p1.x * p2.y - p1.y * p2.x
            t = math.sqrt(a*a + b*b)
            a /= t
            b /= t
            c /= t

            error = 0.0
            inliers = 0
            #遍历输入的点集，计算每个点到直线的距离。如果距离小于给定的阈值threshold，则认为该点是内点，增加内点数量inliers并累计距离误差error。
            for i in range(n):
                dis = abs(a * pts[i].x + b * pts[i].y + c)
                if dis < threshold:
                    inliers += 1
                    error += dis
            #如果内点比例大于 0.7，并且当前的误差小于之前的最小误差，则更新最优直线参数和最小误差。
            if inliers / n > 0.7:
                if error < min_error:
                    min_error = error
                    a_res, b_res, c_res = a, b, c
        #最后，返回最优直线的参数列表[a_res, b_res, c_res]。
        return [a_res, b_res, c_res]
#从用户输入中获取点的数量n。
n = int(input("请输入点的数量："))
#使用列表推导式和map函数从用户输入中读取每个点的坐标，并创建Point2D对象存储在列表pts中。
pts = [Point2D(*map(float, input().split())) for _ in range(n)]
#创建Solution类的实例solution。
solution = Solution()
#调用solution.ransaclr方法对输入的点集进行直线拟合，并将结果存储在params中。
params = solution.ransaclr(pts, 0.1, 1e-4, 10.0)
print(*params)

# 绘制点和最佳拟合直线
x_vals = [p.x for p in pts]
y_vals = [p.y for p in pts]
plt.scatter(x_vals, y_vals)

if params[0] is not None and params[1] is not None and params[2] is not None:
    a, b, c = params
    if b!= 0:
        x = np.linspace(min(x_vals), max(x_vals), 100)
        y = (-a*x - c) / b
        plt.plot(x, y, color='r')
    else:
        plt.axvline(-c/a, color='r')

plt.show()
