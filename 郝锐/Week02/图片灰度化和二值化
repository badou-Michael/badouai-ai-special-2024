# -*- coding: utf-8 -*-
"""
@author: Gift

彩色图像的灰度化、二值化
"""
from skimage.color import rgb2gray
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import cv2

# 灰度化
img = cv2.imread("lenna.png") #读取 同一目录下的图片，返回一个 numpy.ndarray 对象
#print(img) #打印出的是多维的3*3数组
print(img.shape) # (512, 512, 3) 打印出图片的形状，这张图片是分辨率为512*512 三通道的图片
print(type(img.shape)) # <class 'tuple'> 返回一个元组
h, w = img.shape[:2]  # 获取图片的high和wide，其实就是tuple 切片[其实位置（默认为0）:结束位置（不包括这个位置）:步长（默认为0，可省略）]
print(img.dtype) # uint8 是numpy数组的数据类型，有numpy内部自己定义
print(type(img.dtype)) #<class 'numpy.dtype[uint8]'>
#zeros是创建一个数组，需要指定数组的形状，数据的类型
img_gray = np.zeros((h, w), img.dtype)  # 创建一张和当前图片大小一样的单通道图片
img_gray1 = np.zeros((h,w),img.dtype)
for i in range(h): # range(h) 一个0到512 的可迭代对象
    for j in range(w): #range（w) 一个0到512 的可迭代对象
        m = img[i, j]  # 取出当前high和wide中的BGR坐标
        #采用浮点算法将RGB灰度化注意opencv读取的是BGR，各个颜色权重比例为B 0.11 G 0.59 R 0.3
        img_gray[i, j] = int(m[0] * 0.11 + m[1] * 0.59 + m[2] * 0.3)  # 将BGR坐标转化为gray坐标并赋值给新图像
        img_gray1[i,j] = m[0] * 0.11 + m[1] * 0.59 + m[2] * 0.3 #
print("将打印m")
print(m) #m是上面for循环中的m，对应的值是嵌套循环最后一次执行时对于的m[i,j] 即512 512
print('将打印img_gray from manual gray')
print(img_gray)
# print("image show gray: %s" % img_gray)
print(f'image show gray:{img_gray}') #格式化输出
cv2.imshow("image show gray", img_gray) #输出取整后的图像
cv2.imshow("image show gray1", img_gray1) #输出没有取整的图像

#subplot(nrows, ncols, index, **kwargs)
#nrows 子图的行数 ncols子图的列数，index 子图的索引， **kwargs 不定长函数参数
plt.subplot(221) #表示将对2X2的格子第一个格子操作
plt.title('---image lenna----')
print(type(plt.subplot(2,2,1))) #<class 'matplotlib.axes._subplots.AxesSubplot'>
img = plt.imread("lenna.png") #plt 读取原始图片,并除以255，浮点化
# img = cv2.imread("lenna.png", cv2.IMREAD_UNCHANGED) #等效于上面plt.imread
plt.imshow(img)
print("---image lenna----plt.imread--直接浮点化")
print(img)

# 灰度化
#rgb2gray(将读取的图片数组直接每个值都已经除了255)
img_gray = rgb2gray(img) #调用from skimage.color import rgb2gray 直接将图片读取RGB灰度化
# img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
# img_gray = img
plt.subplot(222)
plt.title('---image gray----') #这里不能设置中文，有乱码
plt.imshow(img_gray, cmap='gray') #cmap 指定颜色映射为gray,也可以指定其他颜色，可以随便填一个颜色上去看看支持的颜色
print("---image gray----from rgb2gray")
print(img_gray)

# 二值化
# rows, cols = img_gray.shape
# for i in range(rows):
#     for j in range(cols):
#         if (img_gray[i, j] <= 0.5):
#             img_gray[i, j] = 0
#         else:
#             img_gray[i, j] = 1
#所以这里可以直接二值化 where(condition,x,y) 当条件满足为true，返回x,条件不成立为false，返回y,这个方法简化了二值化的代码
img_binary = np.where(img_gray >= 0.5, 1, 0)
print("-----image_binary------")
print(img_binary)
print(img_binary.shape)

plt.subplot(223)
plt.title('---image binary----')
plt.imshow(img_binary, cmap='gray')
plt.show()
