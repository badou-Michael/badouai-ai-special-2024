# 手动实现pca 特征提取
import numpy as np

class CPCA(object):
    def __init__(self, X, K):
        self.X = X
        self.K = K
        self.centrX = []  # 矩阵X的中心化
        self.C = []  # 协方差矩阵C
        self.U = []  # 降维转换矩阵
        self.Z = []  # 降维矩阵Z

        self.centrX = self._centralized()
        self.C = self._cov()
        self.U = self._U()
        self.Z = self._Z()  # Z=XU求得

    def _centralized(self):
        centrX = []
        mean = np.array([np.mean(attr) for attr in self.X.T])  # 样本集的特征均值
        centrX = self.X - mean  #样本集的中心化
        return centrX

    def _cov(self):
        # 样本集的样例总数
        ns = np.shape(self.centrX)[0]
        # 样本矩阵的协方差矩阵C
        C = np.dot(self.centrX.T, self.centrX) / (ns - 1)
        return C

    def _U(self):
        # 先求X的协方差矩阵C的特征值和特征向量
        a, b = np.linalg.eig(self.C)
        # 给出特征值降序的topK的索引序列
        ind = np.argsort(-1 * a)
        UT = [b[:, ind[i]] for i in range(self.K)]
        U = np.transpose(UT)
        return U

    def _Z(self):
        Z = np.dot(self.X, self.U)
        print(Z)
        return Z


if __name__ == "__main__":
    X = np.array([[10, 15, 29],
                  [15, 46, 13],
                  [23, 21, 30],
                  [11, 9, 35],
                  [42, 45, 11],
                  [9, 48, 5],
                  [11, 21, 14],
                  [8, 5, 15],
                  [11, 12, 21],
                  [21, 20, 25]])
    K = X.shape[1]-1
    # X:样本 K:降为后的维度
    pca = CPCA(X,K)



--------------------------------------------------------------------------------------------------------------------------------
# api实现pca特征提取
import numpy as np
from sklearn.decomposition import PCA

X = np.array(
    [[-1, 2, 66, -1], [-2, 6, 58, -1], [-3, 8, 45, -2], [1, 9, 36, 1], [2, 10, 62, 1], [3, 5, 83, 2]])  # 导入数据，维度为4
pca = PCA(n_components=1)  # 降到1维
pca.fit(X)  # 执行
newX = pca.fit_transform(X)  # 降维后的数据
print(newX)
