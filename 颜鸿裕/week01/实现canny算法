import numpy as np
import math
import cv2

if __name__ == "__main__":
    img = cv2.imread("lenna.png",0)

    #高斯平滑
    sigma = 0.5
    dim = 5
    gause_filter = np.zeros((dim,dim))
    temp = [i-dim//2 for i in range(dim)]
    n1 = 1/(2*math.pi*sigma**2)
    n2 = -1/(2*sigma**2)
    for i in range(dim):
        for j in range(dim):
            gause_filter[i,j] = n1*math.exp((temp[i]**2+temp[j]**2)*n2)

    gause_filter = gause_filter / gause_filter.sum()
    img_new = np.zeros(img.shape)
    img_pad = np.pad(img,((dim//2,dim//2),(dim//2,dim//2)),"constant")
    dx,dy = img.shape
    for i in range(dx):
        for j in range(dy):
            img_new[i,j] = np.sum(img_pad[i:i+dim,j:j+dim]*gause_filter)
    cv2.imshow("img_new",img_new.astype(np.uint8))


    #求梯度
    sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
    img_tidu_x = np.zeros(img_new.shape)
    img_tidu_y = np.zeros(img_new.shape)
    img_tidu = np.zeros(img_new.shape)
    img_pad = np.pad(img_new,((1,1),(1,1)),"constant")
    for i in range(dx):
        for j in range(dy):
            img_tidu_x[i,j] = np.sum(img_pad[i:i+3,j:j+3]*sobel_x)
            img_tidu_y[i,j] = np.sum(img_pad[i:i+3,j:j+3]*sobel_y)
            img_tidu[i,j] = np.sqrt(img_tidu_x[i,j]**2+img_tidu_y[i,j]**2)
    img_tidu_x[img_tidu_x==0] = 0.00000001
    angle = img_tidu_y/img_tidu_x
    cv2.imshow("img_tidu",img_tidu.astype(np.uint8))


    #非极大值抑制
    img_yizhi = np.zeros(img_tidu.shape)
    for i in range(1,dx-1):
        for j in range(1,dy-1):
            temp = img_tidu[i-1:i+2,j-1:j+2]
            flag = True
            if angle[i,j] <= -1:
                num_1 = (temp[0,1] - temp[0,0])/angle[i,j] + temp[0,1]
                num_2 = (temp[2,1] - temp[2,2])/angle[i,j] + temp[2,1]
                if not (img_tidu[i,j]>num_1 and img_tidu[i,j]>num_2):
                    flag = False
            elif angle[i,j] >= 1:
                num_1 = (temp[0,2] - temp[0,1])/angle[i,j] + temp[0,1]
                num_2 = (temp[2,0] - temp[2,1])/angle[i,j] + temp[2,1]
                if not (img_tidu[i,j]>num_1 and img_tidu[i,j]>num_2):
                    flag = False
            elif angle[i,j] < 0:
                num_1 = (temp[1,0] - temp[0,0])*angle[i,j] + temp[1,0]
                num_2 = (temp[1,2] - temp[2,2])*angle[i,j] + temp[1,2]
                if not (img_tidu[i,j]>num_1 and img_tidu[i,j]>num_2):
                    flag = False
            elif angle[i,j] > 0:
                num_1 = (temp[2,0] - temp[1,0])*angle[i,j] + temp[1,0]
                num_2 = (temp[0,2] - temp[1,2])*angle[i,j] + temp[1,2]
                if not (img_tidu[i,j]>num_1 and img_tidu[i,j]>num_2):
                    flag = False
            if flag:
                img_yizhi[i,j] = img_tidu[i,j]
    cv2.imshow("img_yizhi",img_yizhi.astype(np.uint8))


    #双阈值检测
    zhan = []
    low_boundary = img_tidu.mean() * 0.5
    high_boundary = low_boundary * 3
    for i in range(1,img_yizhi.shape[0]-1):
        for j in range(1,img_yizhi.shape[1]-1):
            if img_yizhi[i,j] > high_boundary:
                img_yizhi[i,j] = 255
                zhan.append([i, j])
            if img_yizhi[i,j] < low_boundary:
                img_yizhi[i,j] = 0

    while not len(zhan) == 0:
        n1,n2 = zhan.pop()
        a = img_yizhi[n1-1:n1+2,n2-1:n2+2]
        if (a[0,0]<high_boundary) and (a[0,0]>low_boundary):
            img_yizhi[n1-1,n2-1] = 255
            zhan.append([n1-1,n2-1])
        if (a[0,1]<high_boundary) and (a[0,1]>low_boundary):
            img_yizhi[n1-1,n2] = 255
            zhan.append([n1-1,n2])
        if (a[0,2]<high_boundary) and (a[0,2]>low_boundary):
            img_yizhi[n1-1,n2+1] = 255
            zhan.append([n1-1,n2+1])
        if (a[1,0]<high_boundary) and (a[1,0]>low_boundary):
            img_yizhi[n1,n2-1] = 255
            zhan.append([n1,n2-1])
        if (a[1,2]<high_boundary) and (a[1,2]>low_boundary):
            img_yizhi[n1,n2+1] = 255
            zhan.append([n1,n2+1])
        if (a[2,0]<high_boundary) and (a[2,0]>low_boundary):
            img_yizhi[n1+1,n2-1] = 255
            zhan.append([n1+1,n2-1])
        if (a[2,1]<high_boundary) and (a[2,1]>low_boundary):
            img_yizhi[n1+1,n2] = 255
            zhan.append([n1+1,n2])
        if (a[2,2]<high_boundary) and (a[2,2]>low_boundary):
            img_yizhi[n1+1,n2+1] = 255
            zhan.append([n1+1,n2+1])

    for i in range(img_yizhi.shape[0]):
        for j in range(img_yizhi.shape[1]):
            if (img_yizhi[i,j] != 255 and img_yizhi[i,j] != 0):
                img_yizhi[i, j] = 0

    cv2.imshow("img_final",img_yizhi.astype(np.uint8))
    cv2.waitKey()
